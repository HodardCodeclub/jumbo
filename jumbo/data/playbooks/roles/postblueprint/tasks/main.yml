---
- name: Check that the cluster does not already exist
  uri:
    url: "http://{{ hostvars[groups['ambariserver'][0]]['ansible_all_ipv4_addresses'][0] }}:8080/api/v1/clusters/{{ cluster_name }}"
    headers:
      X-Requested-By: ambari
    method: GET
    force_basic_auth: yes
    user: "{{ ambari.user }}"
    password: "{{ ambari.pwd }}"
    status_code: 200, 201, 202, 404
    body_format: json
    return_content: yes
  register: cluster_existence

- debug:
    msg:
      - The cluster '{{ cluster_name }}' already exists.
      - Cancelling cluster deployment.
  when: cluster_existence.status == 200

- meta: end_play
  when: cluster_existence.status == 200

- name: Check that the blueprint does not already exist
  uri:
    url: "http://{{ hostvars[groups['ambariserver'][0]]['ansible_all_ipv4_addresses'][0] }}:8080/api/v1/blueprints/{{ blueprint_name }}"
    headers:
      X-Requested-By: ambari
    method: GET
    force_basic_auth: yes
    user: "{{ ambari.user }}"
    password: "{{ ambari.pwd }}"
    status_code: 200, 201, 202, 404
    body_format: json
    return_content: yes
  register: bp_existence

- include_tasks: name-bp.yml
  when: bp_existence.status == 200

- name: Template blueprint
  template:
    src: blueprint.j2
    dest: /tmp/blueprint.json
  delegate_to: 127.0.0.1

- name: Post blueprint to ambariserver
  uri:
    url: "http://{{ hostvars[groups['ambariserver'][0]]['ansible_all_ipv4_addresses'][0] }}:8080/api/v1/blueprints/{{ blueprint_name if bp_existence.status != 200 else bp_tmp }}"
    headers:
      X-Requested-By: ambari
    method: POST
    force_basic_auth: yes
    user: "{{ ambari.user }}"
    password: "{{ ambari.pwd }}"
    body: " {{ lookup('file', '/tmp/blueprint.json') }}"
    body_format: raw
    status_code: 200, 201, 202
 
- name: Get version definitions list
  uri:
    url: "http://{{ hostvars[groups['ambariserver'][0]]['ansible_all_ipv4_addresses'][0] }}:8080/api/v1/version_definitions"
    headers:
      X-Requested-By: ambari
    method: GET
    force_basic_auth: yes
    user: "{{ ambari.user }}"
    password: "{{ ambari.pwd }}"
    status_code: 200, 201, 202, 404
    body_format: json
    return_content: yes
  register: version_defs

- name: Get version definitions ids
  vars:
    versions_ids: []
  set_fact:
    versions_ids: "{{ versions_ids }} + [ {{ item }} ]"
  with_items: "{{ (version_defs.content|from_json)|json_query('items[*].VersionDefinition.id') }}"
  no_log: true
  ignore_errors: true

- set_fact:
    existing_url: false

- include_tasks: check-vdf.yml
  when: versions_ids is defined

- name: Template VDF file
  template:
    src: version-definitions.j2
    dest: /tmp/version-definitions.json
  delegate_to: 127.0.0.1
  when: not existing_url

- name: Post version_definition to ambariserver
  uri:
    url: "http://{{ hostvars[groups['ambariserver'][0]]['ansible_all_ipv4_addresses'][0] }}:8080/api/v1/version_definitions"
    headers:
      X-Requested-By: ambari
    method: POST
    force_basic_auth: yes
    user: "{{ ambari.user }}"
    password: "{{ ambari.pwd }}"
    body: " {{ lookup('file', '/tmp/version-definitions.json')}}"
    body_format: raw
    status_code: 200, 201, 202, 400
  when: not existing_url

- name: Template cluster instance file
  template:
    src: cluster.j2
    dest: /tmp/hdp-cluster.json
  delegate_to: 127.0.0.1

- name: Create cluster instance
  uri:
    url: "http://{{ hostvars[groups['ambariserver'][0]]['ansible_all_ipv4_addresses'][0] }}:8080/api/v1/clusters/{{ cluster_name }}"
    headers:
      X-Requested-By: ambari
    method: POST
    force_basic_auth: yes
    user: "{{ ambari.user }}"
    password: "{{ ambari.pwd }}"
    body: " {{ lookup('file', '/tmp/hdp-cluster.json')}}"
    body_format: raw
    status_code: 200, 201, 202
    return_content: yes
  register: cluster_resp

- name: Waiting for HDP install
  debug:
    msg: "Installation of cluster {{ cluster_name }} in progress. Request id: {{ (cluster_resp.content|from_json).Requests.id }}"
